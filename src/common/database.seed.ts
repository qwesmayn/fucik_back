import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { User } from '../user/user.entity';
import * as bcrypt from 'bcrypt';

@Injectable()
export class DatabaseSeedService implements OnModuleInit {
  private readonly logger = new Logger(DatabaseSeedService.name);

  constructor(
    @InjectRepository(User)
    private userRepository: Repository<User>,
  ) {}

  async onModuleInit() {
    await this.seedAdminUser();
  }

  private async seedAdminUser() {
    try {
      const existingAdmin = await this.userRepository.findOne({
        where: { username: 'Admin' }
      });

      if (existingAdmin) {
        this.logger.log('–ê–¥–º–∏–Ω—Å–∫–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        return;
      }

      const adminPassword = 'qweasdzxcgt12';
      const hashedPassword = await bcrypt.hash(adminPassword, 10);

      const adminUser = this.userRepository.create({
        username: 'Admin',
        password: hashedPassword,
      });

      await this.userRepository.save(adminUser);

      this.logger.log(`
        ‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:
        üë§ Username: Admin
        üîë Password: qweasdzxcgt12
        ‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞
      `);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  }
}
